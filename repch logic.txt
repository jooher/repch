/*
server	History{

	table	Stakes{
		>Forum,Author,Item
		Credit : -1.0 .. +1.0
		Stake : 0.0 .. 1.0
		Time
	}
	
	table	Forums{
		>Forum
		Trust = 0.0 .. +1.0
	}
}
*/

const editable = what=>'what editable'.d("! .what").ui(".what=#:value").FOR({what})

'client'.d(

	,'myitems'.d("* (local@ `aspects):get"
		,'aspect'.d("! .title")
		,'credits'.d("* (local@ `credits .aspect):get"
			,'item'.d(""
				,editable("title").ui("(local@ .entity .title):put")
				,'opinion'.d(
					,editable("note")
					,editable("credit")
				).u("(local@ `credit .entity .aspect .note .credit):put")
			)
		)
	)
	
	,'addnew'.d("$entity= $aspect="
		,'entity'.d("$method= $search="
			,'INPUT.barcode'.ui("$method=`barcode $search=#:value")
			,'search'.d(""
				'SELECT.method'.d("* method; Option(.method@value)").ui("$method=#:value")
				'INPUT.words'.ui("$search=#:value")
			).ui("? ($method $search)!; $entity=(forum@ `entity $method $search):get")
		)
		,'aspect'.d("? $entity"
			'SELECT.aspect'.d("* (forum@ `aspects $entity):get; Option(.title@label .aspect@value)").ui("$aspect=#:value")
		)
		,'BUTTON.ok'.d("? ($entity $aspect)").ui("(local@ ` $entity $aspect )")
	)
)

const

local=(()=>{
	
	const
	Aspects = table("aspect: title"),
	Entities= table("entity: title"),
	Opinions= table("entity, aspect: credit, note");
	
	return	{
		
		get	:{
			aspects :$=>Aspects.order({pref:'-'}),
			credits	:$=>Credits.where({$.aspect}).join(Entities),
		},
		
		put	:{
			entity	:$=>Entities.update($),	//entity,title
			credit	:$=>Credits.update($),	//entity,aspect,credit,note
		}
	}
	
})();


const

Forum=(()=>{
	
	function
	δ( Bets|Credit b, Item|Credit i ) = ( i - b)²,
	
	const
	Authors	= table("author: oauth: title"),
	Entries	= table("method,key: entity"),
	Entities= table("entity: title"),
	Tags	= table("tag: entity"),
	Aspects	= table("aspect: title"),
	Items	= table("item: aspect,entity: credit,weight"),
	Bets	= table("bet: author,aspect,entity: credit,stake,bonus,reward,date"),
	Trusts	= table("trust: author,aspect: weight");
	
	return	{
		
		Bet	:(author,aspect,entity,credit,stake)=>{
			
			let	weight	= Trusts{author,aspect}.weight,
				bonus	= D(credit, Items{aspect,entity}.credit);
			
			if(weight>0)
				Items{aspect,entity} .credit+=credit*weight, .weight+=weight;
			
			Bets{author,aspect,entity} credit,stake,bonus;
		},
		
		Trust	:(author,aspect)=>{
			
			Bets{author,aspect}
				reward	= Sum .reward = .bonus - tau*D(credit,Items{aspect,.entity}.credit) / .stake; // ???
				
			Trusts{author,aspect} weight+=reward;
		},
		
	}
})